"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[870],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>m});var n=i(7294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(i),h=o,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||a;return i?n.createElement(m,r(r({ref:t},d),{},{components:i})):n.createElement(m,r({ref:t},d))}));function m(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=i.length,r=new Array(a);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=i[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},5542:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=i(7462),o=(i(7294),i(3905));const a={id:"Building Blocks"},r=void 0,s={unversionedId:"Building Blocks",id:"Building Blocks",title:"Building Blocks",description:"The third section of introduction to WoT is Building Blocks. In this tutorial, we will explain each building block, WoT Thing description, Wot Discovery, WoT Binding templates, and WoT Scripting API.",source:"@site/docs/Building Blocks.md",sourceDirName:".",slug:"/Building Blocks",permalink:"/wot-cg/tutorials/whatiswot/docs/Building Blocks",draft:!1,editUrl:"https://github.com/w3c/wot-cg/docs/Building Blocks.md",tags:[],version:"current",frontMatter:{id:"Building Blocks"},sidebar:"tutorialSidebar",previous:{title:"Architecture Patterns",permalink:"/wot-cg/tutorials/whatiswot/docs/Architecture Patterns"}},l={},c=[{value:"Building Blocks",id:"building-blocks",level:2},{value:"WoT Thing Description",id:"wot-thing-description",level:2},{value:"WoT Discovery",id:"wot-discovery",level:2},{value:"WoT Binding Templates",id:"wot-binding-templates",level:2},{value:"WoT Profile",id:"wot-profile",level:2},{value:"WoT Scripting API",id:"wot-scripting-api",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The third section of introduction to WoT is Building Blocks. In this tutorial, we will explain each building block, WoT Thing description, Wot Discovery, WoT Binding templates, and WoT Scripting API."),(0,o.kt)("h2",{id:"building-blocks"},"Building Blocks"),(0,o.kt)("p",null,"Let\u2019s start with building blocks in general. What are building blocks?"),(0,o.kt)("p",null,"Building blocks allow the implementation of systems that conform with the abstract WoT Architecture."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"wot-building-blocks",src:i(5744).Z,width:"905",height:"464"})),(0,o.kt)("p",null,"Let's look closer to the WoT building blocks."),(0,o.kt)("p",null,"It is an abstraction of the relationship between the building blocks and the main architectural aspects of a\xa0Thing.\nA Thing always has a TD.\nTD is a key building block that provides metadata describing a\xa0Thing and its network interface.\nThis TD can be shared directly by the Thing or through TD Directory\nTDs can be restricted by the profiles for easier implementation\nThings and consumers can be programmed with the scripting API.\nThe WoT Scripting API is optional, and the Binding Templates are informative."),(0,o.kt)("h2",{id:"wot-thing-description"},"WoT Thing Description"),(0,o.kt)("p",null,"After this overview, let\u2019s start with WoT Thing description."),(0,o.kt)("p",null,"All TDs can be represented in JSON-LD and can be processed just as a normal JSON."),(0,o.kt)("p",null,"And TD defines an\xa0information model according to a semantic vocabulary and a\xa0serialized representation of JSON. It is the key building block that provides human and machine-readable metadata describing the capabilities of a Thing and its network interfaces."),(0,o.kt)("p",null,"TD describes Thing instances with general metadata such as name, ID, and description. In addition to that, TDs can also contain Interaction Affordance metadata and Protocol bindings."),(0,o.kt)("p",null,"The WoT TD building block enhances interoperability. The goal is to enable communication within the machines or controllers."),(0,o.kt)("p",null,"Typically, a programmer can read the robot's TD and program the controller accordingly to automate processes."),(0,o.kt)("p",null,"Controller controls the robot by sending requests."),(0,o.kt)("h2",{id:"wot-discovery"},"WoT Discovery"),(0,o.kt)("p",null,"The next building blocks that we will introduce is WoT Discovery."),(0,o.kt)("p",null,"WoT Thing Descriptions must be known or accessible to other systems and devices."),(0,o.kt)("p",null,"WoT Discovery building block accomplishes this by defining mechanisms for distributing and accessing WoT Thing Description over the network."),(0,o.kt)("p",null,"These mechanisms are used to simplify access to Things and services and support their integration. They are not limited to a local area network but they also support remote discovery."),(0,o.kt)("p",null,"To achieve these functionalities, WoT Discovery uses a two-stage process."),(0,o.kt)("p",null,"In the first stage, an introduction is made with one of the several first-contact mechanisms such as QR codes, mDNS, and DIDs."),(0,o.kt)("p",null,"The second stage is the exploration phase where TDs are made available in TD directories so that they can be managed and searched."),(0,o.kt)("p",null,'After the introduction, WoT Discovery defines a set of second-stage "exploration" mechanisms that provide actual access to metadata.'),(0,o.kt)("p",null,"This can be done in 2 ways: a single TD can be retrieved or a link for TD directories becomes available."),(0,o.kt)("p",null,"It is a database with a REST API to access TDs."),(0,o.kt)("p",null,"Thing Description Directory service provides mechanisms to register, and retrieve WoT metadata and TDs after authentication and authorization."),(0,o.kt)("p",null,"Thus we can summarize the Discovery mechanism like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"discovery-mechanism",src:i(9355).Z,width:"868",height:"470"})),(0,o.kt)("h2",{id:"wot-binding-templates"},"WoT Binding Templates"),(0,o.kt)("p",null,"The third building block is WoT Binding Templates."),(0,o.kt)("p",null,"The IoT uses a variety of protocols for accessing devices because no single protocol is enough to cover the different use cases and requirements. The challenge of the WoT is to enable interactions of a variety of different IoT platforms."),(0,o.kt)("p",null,"The Binding Templates address an application client to use the TD so that they can extract metadata of the protocols such as HTTP and MQTT etc., payload formats such as JSON and CBOR, etc. and their usage in an IoT framework context such as ECHONET and OPC."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"wot-binding-templates",src:i(4967).Z,width:"926",height:"533"})),(0,o.kt)("p",null,"In general, Binding Templates provides a collection of blueprints that give guidance on how to interact with different Things that use different transport protocols, and content types or that are different IoT platforms or standards that use certain combinations of transport protocols and content types."),(0,o.kt)("h2",{id:"wot-profile"},"WoT Profile"),(0,o.kt)("p",null,"Now we will introduce the WoT profile."),(0,o.kt)("p",null,"By nature, TD is flexible and able to describe anything without any limitations."),(0,o.kt)("p",null,"However, in some cases let's say you are trying to communicate with your smart bulb with your smartphone, the lack of limitation of the TDs causes an unnecessary implementation load to communicate with every Thing."),(0,o.kt)("p",null,"And while implementing a thing profile makes it way easier with providing guidance. For instance, developers don\u2019t have to think about which protocols to choose."),(0,o.kt)("p",null,"Thus, in those cases, Profile limits the capabilities of the TDs which enables out of box interoperability among things and devices. And make it possible to communicate with only minor configuration operations such as entering a key or IP address."),(0,o.kt)("h2",{id:"wot-scripting-api"},"WoT Scripting API"),(0,o.kt)("p",null,"Lastly, we will introduce WoT Scripting API, which is an optional building block of W3C WoT. It makes it easier to develop IoT applications by providing an ECMA Script-based API similar to the Web browser APIs."),(0,o.kt)("p",null,"It makes it easier to develop IoT applications by providing an ECMAScript-based API similar to the Web browser APIs."),(0,o.kt)("p",null,"This is achieved by integrating a scripting runtime system into the WoT Runtime, where the WoT Scripting API enables the use of portable application scripts that define the behavior of Things, Consumers, and Intermediaries."),(0,o.kt)("p",null,"We will focus on consumers. The development phase becomes easier with functions like read property and invoke action. Since you don\u2019t have to decide on the protocols when programming controllers. It turns abstract run time scripts into concrete protocol messages."),(0,o.kt)("p",null,"To summarize, WoT enables implementing device logic by reusable scripts executed in a runtime system for IoT applications which aims to improve productivity and reduce integration costs."))}u.isMDXComponent=!0},9355:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/discovery-mechanism-72bc06691fffe7bb16b909f4bed32793.png"},4967:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/wot-binding-templates-60c772f624523cd9bb73e2989e360a12.png"},5744:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/wot-building-blocks-202e590e4895c1ee4eb88d3df9f12171.png"}}]);