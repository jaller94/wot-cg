"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[545],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||s;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<s;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4182:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const s={sidebar_position:4},o=void 0,l={unversionedId:"json-tutorial/JSON Schema in Practice",id:"json-tutorial/JSON Schema in Practice",title:"JSON Schema in Practice",description:"As we discussed in the previous tutorial, JSON Schema is a declarative format for \u201cdescribing the structure of other data\u201d. Now we will explain its implementation.",source:"@site/docs/json-tutorial/JSON Schema in Practice.md",sourceDirName:"json-tutorial",slug:"/json-tutorial/JSON Schema in Practice",permalink:"/wot-cg/tutorials/whatiswot/docs/json-tutorial/JSON Schema in Practice",draft:!1,editUrl:"https://github.com/w3c/wot-cg/docs/json-tutorial/JSON Schema in Practice.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"JSON Schema",permalink:"/wot-cg/tutorials/whatiswot/docs/json-tutorial/JSON Schema"},next:{title:"JSON Schema in Practice - Advanced Topics",permalink:"/wot-cg/tutorials/whatiswot/docs/json-tutorial/JSON Schema in Practice - Advanced Topics"}},i={},p=[{value:"The Type Keyword",id:"the-type-keyword",level:2},{value:"Objects",id:"objects",level:2},{value:"Properties",id:"properties",level:2},{value:"Additional Properties",id:"additional-properties",level:3},{value:"Required Properties",id:"required-properties",level:3},{value:"Array",id:"array",level:2},{value:"Items",id:"items",level:2},{value:"Boolean",id:"boolean",level:2},{value:"Null",id:"null",level:2},{value:"ContentMedia Type",id:"contentmedia-type",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...s}=e;return(0,r.kt)(u,(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"As we discussed in the previous tutorial, JSON Schema is a declarative format for \u201cdescribing the structure of other data\u201d. Now we will explain its implementation."),(0,r.kt)("h1",{id:"declaring-a-json-schema"},"Declaring a JSON Schema"),(0,r.kt)("p",null,"There are many different drafts of JSON Schema, and it is not always easy to tell which draft is it. Thus, we use the schema keyword to declare which version is used. WoT uses Draft7, that's why throughout this tutorial we will use Draft7."),(0,r.kt)("p",null,'{"$schema": ',(0,r.kt)("a",{parentName:"p",href:"http://json-schema.org/draft-07/schema%7D"},"http://json-schema.org/draft-07/schema}")),(0,r.kt)("p",null,"It is not mandatory, but a good practice to specify a unique ID to be able to reach schemas."),(0,r.kt)("p",null,'{"$id": "',(0,r.kt)("a",{parentName:"p",href:"http://example.com/temperatureSchema%22%7D"},'http://example.com/temperatureSchema"}')),(0,r.kt)("p",null,"In JSON Schema, an empty object is a completely valid schema that will accept any valid JSON."),(0,r.kt)("p",null,"It can be also used\xa0truly\xa0in a place of the empty object to represent a schema that matches anything, or\xa0false\xa0for a schema that matches nothing."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"empty-json-schema",src:a(369).Z,width:"1590",height:"796"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"true-json-schema",src:a(9413).Z,width:"1574",height:"780"})),(0,r.kt)("h2",{id:"the-type-keyword"},"The Type Keyword"),(0,r.kt)("p",null,"One of the most useful common things to do in a JSON Schema is to restrict a specific type by using a type keyword."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"string-schema",src:a(7042).Z,width:"1580",height:"816"})),(0,r.kt)("p",null,"Similar to this, numeric types can also be defined.\nThere are two numeric types in JSON Schema:\xa0integer\xa0and\xa0number. They share the same validation keywords. Number accepts integers and floating numbers.\nWhereas numeric type integer rejects floating points."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"number-schema",src:a(3515).Z,width:"1572",height:"846"})),(0,r.kt)("h2",{id:"objects"},"Objects"),(0,r.kt)("p",null,'Objects are the mapping type in JSON. They map "keys" to "values". In JSON, the "keys" must always be strings.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object"\n}\n')),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("p",null,"The properties which are a key-value pair on an object are defined using the\xa0properties\xa0keyword. The value of\xa0properties\xa0is an object, where each key is the name of a property and each value is a schema used to validate that property."),(0,r.kt)("p",null,'Here is an example JSON Schema defined with the keyword "properties":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object",\n  "properties": {\n    "number": { "type": "number" },\n    "streetName": { "type": "string" }\n  }\n}\n')),(0,r.kt)("p",null,"This example is accepted by the JSON Schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "number": 1600,\n  "streetName": "Boltzmann"\n}\n')),(0,r.kt)("p",null,"Whereas the second one is ",(0,r.kt)("strong",{parentName:"p"},"not accepted")," because the value of a number is a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "number": "1600",\n  "streetName": "Boltzmann"\n}\n')),(0,r.kt)("h3",{id:"additional-properties"},"Additional Properties"),(0,r.kt)("p",null,"In addition to the last example, The\xa0additionalProperties\xa0keyword can be used to control the handling of extra stuff, which is, properties whose names are not listed in the\xa0properties\xa0keyword. If it is false, then it does not accept additional properties. Otherwise, you can specify what type can be given too."),(0,r.kt)("p",null,"A JSON Schema which has the additionalProperties keyword:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"additionalProperties": {\n    "type": "string"\n    }\n')),(0,r.kt)("p",null,"It accepts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "number": 1600,\n  "streetName": "Boltzmann"\n}\n')),(0,r.kt)("p",null,"And also accepts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "number": "1600",\n  "streetName": "Boltzmann",\n  "direction": "NW"\n}\n')),(0,r.kt)("h3",{id:"required-properties"},"Required Properties"),(0,r.kt)("p",null,"By default, the properties defined by the\xa0properties\xa0keyword are not required. However, one can provide a list of required properties using the\xa0required\xa0keyword."),(0,r.kt)("p",null,'Here is an example JSON Schema with the keyword "required":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object",\n  "properties": {\n    "name": { "type": "string" },\n    "email": { "type": "string" },\n    "address": { "type": "string" },\n    "telephone": { "type": "string" }\n  },\n  "required": ["name", "email"]\n}\n')),(0,r.kt)("p",null,"It accepts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "William Shakespeare",\n  "email": "bill@tum.de\n}\n')),(0,r.kt)("p",null,"This one is ",(0,r.kt)("strong",{parentName:"p"},"not accepted")," as it does not contain email information and it is defined required:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "William Shakespeare",\n  "address": "Henley Street, 80945"\n}\n')),(0,r.kt)("h2",{id:"array"},"Array"),(0,r.kt)("p",null,"Arrays are used for ordered elements. In JSON, each element in an array can be of a different type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "array"\n}\n')),(0,r.kt)("p",null,"This schema accepts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[3, "different", { "types": "of values" }]\n')),(0,r.kt)("p",null,"But ",(0,r.kt)("strong",{parentName:"p"},"does not accept")," this as it is not an array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "Not": "an array" }\n')),(0,r.kt)("h2",{id:"items"},"Items"),(0,r.kt)("p",null,"The\xa0items\xa0keyword can be used to control whether it\u2019s valid to have additional items in a tuple. The value of the\xa0items\xa0keyword is a schema that all additional items must pass for the keyword to validate. It can be false, which means there is no additional items allowed or it can define a type for the items in the array."),(0,r.kt)("p",null,"For example this schema accepts items in type of number:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "array",\n  "items": {\n    "type": "number"\n  }\n}\n')),(0,r.kt)("p",null,"Therefore accepts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"[1, 2, 3, 4, 5]\n")),(0,r.kt)("p",null,"But ",(0,r.kt)("strong",{parentName:"p"},"does not accept")," this as the 3rd element is of type string but not a number:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[1, 2, "3", 4, 5]\n')),(0,r.kt)("h2",{id:"boolean"},"Boolean"),(0,r.kt)("p",null,"The Boolean type matches only two special values:\xa0true\xa0and\xa0false. Note that values that\xa0evaluate\xa0to\xa0true\xa0or\xa0false, such as 1 and 0, are not accepted by the schema."),(0,r.kt)("p",null,"The JSON Schema with type defined as Boolean can be written as this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "boolean"\n}\n')),(0,r.kt)("p",null,"And it only accepts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"true\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"false\n")),(0,r.kt)("p",null,"and ",(0,r.kt)("strong",{parentName:"p"},"does not accept")," this as the type is not boolean but string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"true"\n')),(0,r.kt)("h2",{id:"null"},"Null"),(0,r.kt)("p",null,"When a schema specifies the type\xa0of\xa0null, it has only one acceptable value:\xa0null."),(0,r.kt)("p",null,"The JSON Schema can be defined as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "null"\n}\n')),(0,r.kt)("p",null,"This schema only accepts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"null\n")),(0,r.kt)("p",null,"and ",(0,r.kt)("strong",{parentName:"p"},"does not accept")," others such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"false\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"0\n")),(0,r.kt)("h2",{id:"contentmedia-type"},"ContentMedia Type"),(0,r.kt)("p",null,"The\xa0contentMediaType\xa0keyword specifies the MIME type of the contents of a string, as described in\xa0RFC 2046. If you want to specify any type that is not JSON, it is possible to do with these content media types."),(0,r.kt)("p",null,"List of MIME types:"),(0,r.kt)("p",null,"This schema indicates the string contains an HTML document, encoded using the same encoding as the surrounding document:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "string",\n  "contentMediaType": "text/html"\n}\n')),(0,r.kt)("p",null,"This schema here indicates that a string contains a\xa0PNG\xa0image, encoded using Base64:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "string",\n  "contentEncoding": "base64",\n  "contentMediaType": "image/png"\n}\n')))}d.isMDXComponent=!0},369:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/empty-json-schema-0c6c4dbe9d59974aa590f4fb68631761.png"},3515:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/number-schema-2b5ad07b8d013ee90d6a13a5aa72982f.png"},7042:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/string-schema-ddc7fbce90b28e603c2a6716875652a5.png"},9413:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/true-json-schema-c89fc7b46a470aa6c082ec3a9f90e07b.png"}}]);