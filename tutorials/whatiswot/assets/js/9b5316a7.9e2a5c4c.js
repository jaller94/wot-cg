"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[378],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=l,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:l,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),l=(n(7294),n(3905));const o={id:"JSON Schema in Practice - Advanced Topics"},r=void 0,i={unversionedId:"json-tutorial/JSON Schema in Practice - Advanced Topics",id:"json-tutorial/JSON Schema in Practice - Advanced Topics",title:"JSON Schema in Practice - Advanced Topics",description:"In the previous tutorial, we have learned the basics of JSON Schema. In this tutorial, we will continue with more advanced topics such as generic keywords, schema composition and schema conditionality.",source:"@site/docs/json-tutorial/JSON Schema in Practice - Advanced Topics.md",sourceDirName:"json-tutorial",slug:"/json-tutorial/JSON Schema in Practice - Advanced Topics",permalink:"/wot-cg/tutorials/whatiswot/docs/json-tutorial/JSON Schema in Practice - Advanced Topics",draft:!1,editUrl:"https://github.com/w3c/wot-cg/docs/json-tutorial/JSON Schema in Practice - Advanced Topics.md",tags:[],version:"current",frontMatter:{id:"JSON Schema in Practice - Advanced Topics"},sidebar:"tutorialSidebar",previous:{title:"JSON Schema in Practice",permalink:"/wot-cg/tutorials/whatiswot/docs/json-tutorial/JSON Schema in Practice"},next:{title:"JSON Schema Validation",permalink:"/wot-cg/tutorials/whatiswot/docs/json-tutorial/JSON Schema Validation"}},s={},c=[{value:"Generic Keywords",id:"generic-keywords",level:2},{value:"Enumerated Values",id:"enumerated-values",level:2},{value:"Constant Values",id:"constant-values",level:2},{value:"Schema Composition",id:"schema-composition",level:2},{value:"allOf",id:"allof",level:3},{value:"anyOf",id:"anyof",level:3},{value:"oneOf",id:"oneof",level:3},{value:"not",id:"not",level:3},{value:"Schema Conditionality",id:"schema-conditionality",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"In the previous tutorial, we have learned the basics of JSON Schema. In this tutorial, we will continue with more advanced topics such as generic keywords, schema composition and schema conditionality."),(0,l.kt)("h2",{id:"generic-keywords"},"Generic Keywords"),(0,l.kt)("p",null,"Some of the annotation keywords used in JSON Schema are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"title"),(0,l.kt)("li",{parentName:"ul"},"description"),(0,l.kt)("li",{parentName:"ul"},"default.")),(0,l.kt)("p",null,"None of these annotation words are required but enhance good practice for self-documenting Schemas.\nThe\xa0title\xa0and\xa0description\xa0keywords must be strings.\nThe\xa0default\xa0keyword specifies a default value."),(0,l.kt)("p",null,"The style of the JSON Schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "Match anything",\n  "description": "Description of the Schema.",\n  "default": "Default value"\n}\n')),(0,l.kt)("h2",{id:"enumerated-values"},"Enumerated Values"),(0,l.kt)("p",null,"The\xa0",(0,l.kt)("strong",{parentName:"p"},"enum"),"\xa0keyword is used to restrict a value to a fixed set of values. It must be an array with at least one element, where each element is unique."),(0,l.kt)("p",null,"An example JSON Schema with enum keyword:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "enum": ["red", "green"]\n}\n')),(0,l.kt)("p",null,"This schema accepts:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"red"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"green"\n')),(0,l.kt)("p",null,"but ",(0,l.kt)("strong",{parentName:"p"},"does not accept"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"blue"\n')),(0,l.kt)("h2",{id:"constant-values"},"Constant Values"),(0,l.kt)("p",null,"The\xa0",(0,l.kt)("strong",{parentName:"p"},"const"),"\xa0keyword is used to restrict a value to a single value."),(0,l.kt)("p",null,"An example JSON Schema with the const keyword:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "properties": {\n    "country": {\n      "const": "USA"\n    }\n  }\n}\n')),(0,l.kt)("p",null,"This schema only accepts:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{ "country": "USA" }\n')),(0,l.kt)("p",null,"and ",(0,l.kt)("strong",{parentName:"p"},"does not accept"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{ "country": "Canada" }\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{ "country": "Germany" }\n')),(0,l.kt)("h2",{id:"schema-composition"},"Schema Composition"),(0,l.kt)("p",null,"JSON Schema includes a few keywords for combining Schemas together.\nThe most used ones are allOf, anyOf, oneOf, and not.\nAll of these keywords must be set to an array, where each item is a Schema."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"allOf"),": (AND) Must be valid against\xa0",(0,l.kt)("strong",{parentName:"li"},"all"),"\xa0of the subSchemas"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"anyOf"),": (OR) Must be valid against\xa0",(0,l.kt)("strong",{parentName:"li"},"any"),"\xa0of the subSchemas"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"oneOf"),": (XOR) Must be valid against ",(0,l.kt)("strong",{parentName:"li"},"exactly one")," of the subSchemas")),(0,l.kt)("h3",{id:"allof"},"allOf"),(0,l.kt)("p",null,"To validate allOf, the given data must be valid against all of the given subSchemas."),(0,l.kt)("p",null,"An example JSON Schema defined with the keyword allOf:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "allOf": [{ "type": "string" }, { "maxLength": 7 }]\n}\n')),(0,l.kt)("p",null,"This schema accepts this as it is both a string and its length does not excede 7:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"short"\n')),(0,l.kt)("p",null,"But ",(0,l.kt)("strong",{parentName:"p"},"does not accept")," this as its length is larger than 7:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"long string"\n')),(0,l.kt)("h3",{id:"anyof"},"anyOf"),(0,l.kt)("p",null,"To validate anyOf, the given data must be valid against any (one or more) of the given subSchemas."),(0,l.kt)("p",null,"An example JSON Schema with the keyword anyOf:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "anyOf": [\n    { "type": "string", "maxLength": 5 },\n    { "type": "number", "minimum": 0 }\n  ]\n}\n')),(0,l.kt)("p",null,"It is enough when only one of these criteria is satisfied."),(0,l.kt)("p",null,"So this one is accepted as it is string with the length of 5:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"short"\n')),(0,l.kt)("p",null,"And also this one is accepted because it is a number and larger than 0:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"12"\n')),(0,l.kt)("p",null,"But this one is ",(0,l.kt)("strong",{parentName:"p"},"not accepted")," since it does not fit none of the criteria:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"long string"\n')),(0,l.kt)("h3",{id:"oneof"},"oneOf"),(0,l.kt)("p",null,"To validate oneOf, the given data must be valid against exactly one of the given subSchemas."),(0,l.kt)("p",null,"An example JSON Schema with the keyword oneOf:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "oneOf": [\n    { "type": "number", "multipleOf": 5 },\n    { "type": "number", "multipleOf": 2 }\n  ]\n}\n')),(0,l.kt)("p",null,"This schema will accept numbers which are either multiple of 5, or 2. It will perform an XOR operation."),(0,l.kt)("p",null,"It accepts this one as it is multiple of 5:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"25\n")),(0,l.kt)("p",null,"and this as it is multiple of 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"4\n")),(0,l.kt)("p",null,"however this one is ",(0,l.kt)("strong",{parentName:"p"},"not accepted")," because it is both multiple of 2 and 5:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"10\n")),(0,l.kt)("h3",{id:"not"},"not"),(0,l.kt)("p",null,"The\xa0not\xa0keyword declares that an instance validates if it doesn\u2019t validate against the given subSchema."),(0,l.kt)("p",null,"An example JSON Schema with the not keyword:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "not": { "type": "string" }\n}\n')),(0,l.kt)("p",null,"It will accept this as the type is number:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"25\n")),(0,l.kt)("p",null,"And this as it is type of boolean:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"true\n")),(0,l.kt)("p",null,"But this is ",(0,l.kt)("strong",{parentName:"p"},"not accepted")," since it is type string:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"10"\n')),(0,l.kt)("h2",{id:"schema-conditionality"},"Schema Conditionality"),(0,l.kt)("p",null,"The\xa0if,\xa0then\xa0and\xa0else\xa0keywords allow the application of a subSchema based on the outcome of another Schema, as it is in other programming languages."),(0,l.kt)("p",null,"If\xa0it\xa0is valid,\xa0then\xa0must also be valid (and\xa0else\xa0is ignored). If\xa0it\xa0is invalid,\xa0else\xa0must also be valid (and\xa0then\xa0ignored)."),(0,l.kt)("p",null,"Here is an example JSON Schema defined with the keywords if, then, else:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object",\n  "if": {\n    "properties": {\n      "country": { "const": "USA" }\n    }\n  },\n  "then": {\n    "properties": {\n      "nationality": { "const": "American" }\n    }\n  },\n  "else": {\n    "properties": {\n      "nationality": { "const": "Canadian" }\n    }\n  }\n}\n')),(0,l.kt)("p",null,"This schema will accept:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "country": "USA",\n  "nationality": "American"\n}\n')),(0,l.kt)("p",null,"And ",(0,l.kt)("strong",{parentName:"p"},"does not accept"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "country": "Canada",\n  "nationality": "American"\n}\n')))}m.isMDXComponent=!0}}]);